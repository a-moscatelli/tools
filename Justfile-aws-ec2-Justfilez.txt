##### copyright alberto moscatelli 2025 #####

# this is the level-zero Justfile - see https://github.com/casey/just and https://just.systems/man/en/

# to install just:
# sudo apt update
# sudo apt install -y just

# to download a copy of this file from github:
### see below: just upgrade_myself



import? 'adhoc.Justfile'
# ... import but do not fail if not there

#host := `uname -i -o`


alias ddown := ddn
alias hi := hello
alias uj := upgrade_myself
alias dinto := enter_a_running_container


default:
  just --list

hello:
  @echo "This is an {{arch()}} machine".
  @echo "Justfile path: {{justfile()}}"

upgrade_myself:
  mv Justfile Justfile.old && curl -o Justfile https://raw.githubusercontent.com/a-moscatelli/tools/refs/heads/main/Justfile-aws-ec2-Justfilez.txt


##### ##### ##### ##### EC2 SETUP ##### #####

# pre-install: run apt update
install_pre:
   sudo apt update

install_docker_docker: install_pre
   sudo apt install -y docker.io

install_docker_dockercompose: install_docker_docker
   sudo apt install -y docker-compose

# install docker works - usually the first command I run on a brand new EC2 instance
install_docker: install_docker_dockercompose 

##### ##### ##### ##### docker-compose ##### #####

# start docker-compose
dup:
   sudo docker-compose up -d

# show docker containers
dps:
   sudo docker ps

# watch docker ps
dpsw:
   sudo watch docker ps

# watch docker stats
dstatw:
   sudo watch docker stats

# stop docker-compose
ddn:
   sudo docker-compose down --remove-orphans

ddu: ddn dup

# docker ps - exited containers included
dpsa:
   sudo docker ps -a

# tail -f container logs
dlog container_id_or_name:
   sudo docker logs -f {{container_id_or_name}}

stop_a_busybox_container argname_or_id:
  sudo docker-compose stop {{argname_or_id}}
  #sudo docker container rm {{argname_or_id}}

dhelp:
    @echo - docker reminders
    @echo "ports: host:contn = 80:8080 = the world can access host:80 which will be forwarded to containers port 8080."
    @echo "expose - 80 is nothing more than a reminder, no port is available outside the bridge"
    @echo 'sudo docker exec -i  postgres_running_container   psql -U metabase -d metabase < pg-user-baserow.sql'
    @echo "sudo docker-compose --profile es --profile my up -d"
    @echo -
    @echo images - caddy:2.10 - busybox:1.36 - postgres:17.5 - authelia 4.39

##### ##### ##### ##### grep-based ##### #####

# config stats: run with eg docker-co busybox:
scan_declared_images filename_prefix image_name_prefix:
    sudo find . -name "{{filename_prefix}}*" -type f -exec grep -H -e "^[[:space:]]*image:[[:space:]]*{{image_name_prefix}}" {} \;


# grep -il
recur_grep_il str:
    sudo find . -type f -exec grep -il "{{str}}" {} \;

# grep -e with context
recur_grep_txt str ctxsize:
    sudo find . -type f -exec grep -H -C {{ctxsize}} -e "{{str}}" {} \;


# grep regex with context via xargs - ctx=1 means show the line with a match, +previous +next
recur_grep_re str ctxsize:
    (find . -type f -print0 | xargs -0 grep -H -C {{ctxsize}} "{{str}}") 2>/dev/null


##### ##### ##### ##### utils - text and security ##### #####

run_awk argscript:
    sudo docker run -v ./awk:/tmpawk busybox:1.36 awk -f /tmpawk/{{argscript}}

run_bcrypt password_to_hash:
    sudo docker run caddy:2.10 caddy hash-password --plaintext {{password_to_hash}}

generate_authelia_password_hash password:
  sudo docker run authelia/authelia:4.39 authelia crypto hash generate argon2 --password '{{password}}'

pandoc_md2html infile_md outfile_html:
        docker run --rm -v "$PWD":/data -w /data pandoc/core {{infile_md}} -s -o {{outfile_html}}


##### ##### ##### ##### AWS CLI ##### #####

# actually not working...
awsec2_my_public_ip:
   curl http://169.254.169.254/latest/meta-data/public-ipv4


# main example on how to use this container
#awscli_mybuckets:
#  sudo docker run --rm \
#  -v ~/.aws:/root/.aws \
#  -v ~/local_aws:/aws \
#  amazon/aws-cli s3 ls

# example: just awscli "s3 ls am1misc" | grep amwiki
awscli_dot args: 
  sudo docker run --rm \
    -v ~/.aws:/root/.aws \
    -v ~/local_aws:/aws \
    amazon/aws-cli {{args}}

# with env variables AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY
awscli arg_akid arg_sak args:
  sudo docker run --rm -it \
    -e AWS_ACCESS_KEY_ID={{arg_akid}} \
    -e AWS_SECRET_ACCESS_KEY={{arg_sak}} \
    -e AWS_DEFAULT_REGION=eu-central-1 \
    amazon/aws-cli {{args}}

##### ##### ##### ##### CONTAINERS CONNECT ##### #####

# sudo docker run -it busybox:1.36 sh
enter_a_new_busybox:
  sudo docker run -it -v $PWD:/host_pwd busybox:1.36 sh

# sudo docker exec -it {{argcntname}} sh
enter_a_running_container argcntname:
  sudo docker exec -it {{argcntname}} sh

# psql most common commands: \list \du
enter_a_running_pg_cli arg_containername:
  sudo docker exec -it {{arg_containername}} psql -U postgres -d postgres
# -c "select now();"
#  sudo docker exec -it {{arg_containername}} psql -U $PGUSER -d $PGDATABASE


##### ##### ##### ##### scp - ftp ##### #####

scp_setup_step1_on_activehost:
  ssh-keygen -t rsa -b 2048
  cat ~/.ssh/id_rsa.pub
  echo now copy the generated line to your clipboard - check it's like ubuntu@ip-172-31-37-197

scp_setup_step2_on_passivehost:
  sudo cat ~/.ssh/authorized_keys
  echo now paste/append the generated line from your clipboard to file above

scp_setup_step3_on_activehost:
  echo being eval.a-moscatelli.info (private) = ip-172-31-37-197 (public name) - what is important is the user
  echo run for example scp adhoc.Justfile ubuntu@eval.a-moscatelli.info:~/camunda_project/adhoc.Justfile

## start ftp server with ANONYMOUS login - make sure the security group of the EC2 includes the specified port - TBC - needs PASV - could not use.
#start_a_busybox_ftpd argport:
#  sudo docker run -d --name busybox-ftpd \
#  -p {{argport}}:{{argport}} \
#  -v $(pwd)/ftpdata:/home/ftpuser \
#  busybox:1.36 sh -c "tcpsvd -vE 0.0.0.0 {{argport}} ftpd -A -w /home/ftpuser"
