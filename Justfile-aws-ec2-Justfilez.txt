

# this is the level-zero Justfile - see https://github.com/casey/just and https://just.systems/man/en/

# to install just:
# sudo apt update
# sudo apt install -y just

# to download a copy of this file from github:
# JU=https://raw.githubusercontent.com/a-moscatelli/tools/refs/heads/main/Justfile-aws-ec2-Justfilez.txt
# curl -o Justfile $JU
### also see below: just upgrade_myself



import? 'adhoc.Justfile'
# ... import but do not fail if not there

#host := `uname -i -o`


alias ddown := ddn
alias hi := hello
alias uj := upgrade_myself


default:
  just --list

hello:
  @echo "This is an {{arch()}} machine".
  @echo "Justfile path: {{justfile()}}"
  # echo "Hello, World! from a {{host}} host"

upgrade_myself:
  curl -o Justfile https://raw.githubusercontent.com/a-moscatelli/tools/refs/heads/main/Justfile-aws-ec2-Justfilez.txt


### ### ###

# pre-install: run apt update
install_pre:
   sudo apt update

install_docker_docker: install_pre
   sudo apt install -y docker.io

install_docker_dockercompose: install_docker_docker
   sudo apt install -y docker-compose

# install docker works - usually the first command I run on a brand new EC2 instance
install_docker: install_docker_dockercompose 

### ### ###

# start docker-compose
dup:
   sudo docker-compose up -d

# show docker containers
dps:
   sudo docker ps

# stop docker-compose
ddn:
   sudo docker-compose down --remove-orphans

# docker ps - exited containers included
dpsa:
   sudo docker ps -a

dlog container_id_or_name:
   sudo docker logs -f {{container_id_or_name}}

### ### ###


awsec2_my_public_ip:
   curl http://169.254.169.254/latest/meta-data/public-ipv4

awscli_mybuckets:
  sudo docker run --rm \
  -v ~/.aws:/root/.aws \
  -v ~/local_aws:/aws \
  amazon/aws-cli s3 ls

# example: just awscli "s3 ls am1misc | grep amwiki
awscli args: 
  sudo docker run --rm \
    -v ~/.aws:/root/.aws \
    -v ~/local_aws:/aws \
    amazon/aws-cli {{args}}

awscli_mybuckets_env argkid argksecr:
  sudo docker run --rm -it \
    -e AWS_ACCESS_KEY_ID={{argkid}} \
    -e AWS_SECRET_ACCESS_KEY={{argksecr}} \
    -e AWS_DEFAULT_REGION=eu-central-1 \
    amazon/aws-cli s3 ls

### ### ###

enter_a_new_busybox:
  sudo docker run -it busybox:latest sh

# start ftp server with ANONYMOUS login - make sure the security group of the EC2 includes the specified port - TBC - needs PASV !
start_a_busybox_ftpd argport:
  sudo docker run -d --name busybox-ftpd \
  -p {{argport}}:{{argport}} \
  -v $(pwd)/ftpdata:/home/ftpuser \
  busybox sh -c "tcpsvd -vE 0.0.0.0 {{argport}} ftpd -A -w /home/ftpuser"

stop_a_busybox_container argname_or_id:
  sudo docker container stop {{argname_or_id}}
  sudo docker container rm {{argname_or_id}}

### ### ###

scp_setup_step1_on_activehost:
  ssh-keygen -t rsa -b 2048
  cat ~/.ssh/id_rsa.pub
  echo now copy the generated line to your clipboard - check it's like ubuntu@ip-172-31-37-197

scp_setup_step2_on_passivehost:
  sudo cat ~/.ssh/authorized_keys
  echo now paste/append the generated line from your clipboard to file above

scp_setup_step3_on_activehost:
  echo being eval.a-moscatelli.info (private) = ip-172-31-37-197 (public name) - what is important is the user
  echo run for example scp adhoc.Justfile ubuntu@eval.a-moscatelli.info:~/camunda_project/adhoc.Justfile
